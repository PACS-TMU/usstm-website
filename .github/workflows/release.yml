name: Release
on:
  schedule:
    - cron: '0 17 * * TUE'

jobs:
  check:
    name: Check `dev` for unreleased changes
    runs-on: ubuntu-latest
    outputs:
      check: ${{ steps.check.outputs.check }}
    steps:
      - name: Checkout latest commit from `main`
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Check if `dev` branch is ahead of `main`
        id: check
        run: |
          if git fetch --shallow-since=$(date --date="1 week ago" +%Y-%m-%d) origin dev:dev && \
             # `git repack -d` is necessary to avoid a weird error when trying to deepen `dev`
             git repack -d && git fetch --deepen 1 origin dev:dev && \
             git merge-base --is-ancestor dev main; then
            echo "check=false" >> $GITHUB_OUTPUT
          else
            echo "check=true" >> $GITHUB_OUTPUT
          fi

  release:
    name: Create a release PR
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.check == 'true'
    permissions:
      contents: write
      pull-requests: write
    steps: 
      - name: Compute new tag
        id: tag
        run: |
          echo "${{ needs.check.outputs.check }}"
          REPO="${{ github.server_url }}/${{ github.repository }}.git"
          TAG=$(git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' $REPO '*.*.*' \
                  | tail -n1 | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+$')
          TAG="$(printf $TAG | sed -E 's/^([0-9]+\.[0-9]+\.)[0-9]+$/\1/')$(printf \
                  "$(( $(printf $TAG | grep -Eo '[0-9]+$') + 1 ))")"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "sha=$(git ls-remote $REPO --refs 'dev' | grep -Eo '^[A-z0-9]+')" >> $GITHUB_OUTPUT
      - name: Tag latest commit on `dev` as `v${{ steps.tag.outputs.tag }}`
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ steps.tag.outputs.tag }}',
              sha: '${{ steps.tag.outputs.sha }}',
            })

        # Required for `gh` command to work below
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create a PR from `${{ steps.tag.outputs.tag }}` onto `main`
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create -B main -H dev \
            --title 'Release ${{ steps.tag.outputs.tag }}' \
            --body 'Generated by release workflow'
